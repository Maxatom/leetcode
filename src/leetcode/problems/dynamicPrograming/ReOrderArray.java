package leetcode.problems.dynamicPrograming;

import java.util.ArrayList;
import java.util.List;

public class ReOrderArray {
    public static void main(String[] args) {
        ReOrderArray array = new ReOrderArray();
        int[] nums = {479,525,186,383,38,722,54,147,780,381,644,781,511,611,650,85,753,625,693,530,340,602,695,371,535,95,434,267,553,346,627,414,117,423,62,290,268,759,318,613,775,793,26,788,514,518,797,216,538,361,442,12,190,622,185,221,265,550,691,731,266,682,474,558,310,584,263,243,35,721,690,21,224,149,144,639,772,209,86,498,169,372,549,441,352,104,630,72,435,417,331,119,560,737,492,113,118,575,116,65,106,742,546,509,208,739,605,450,677,303,629,28,359,170,355,679,703,603,743,41,90,698,447,201,544,712,335,96,666,668,449,48,708,547,46,489,127,288,710,725,475,376,587,564,102,123,232,343,60,302,273,121,705,238,433,671,471,63,581,573,499,623,485,676,715,427,583,720,297,404,556,89,513,153,411,206,178,455,487,140,394,685,483,281,75,306,128,114,590,488,733,592,632,405,357,115,787,773,324,500,659,391,480,702,237,168,369,426,607,154,652,313,495,672,688,68,470,305,258,734,706,367,364,589,398,384,76,448,330,559,641,386,3,493,262,790,360,687,11,408,774,34,150,52,686,779,466,523,600,683,762,481,409,241,635,649,718,146,431,457,717,69,163,528,555,789,341,566,198,618,595,428,39,73,353,226,484,579,744,462,557,292,97,577,767,79,532,164,312,130,724,299,769,615,675,187,307,248,662,289,755,259,344,158,24,191,727,320,468,174,763,194,131,358,203,94,601,193,699,70,13,347,502,120,298,338,5,588,665,596,188,129,210,464,628,696,416,333,543,348,138,515,229,764,571,316,176,616,368,223,746,84,633,108,136,4,77,494,43,362,469,782,23,534,667,29,14,45,9,424,332,765,770,570,328,542,7,430,141,651,277,160,195,148,658,133,87,182,321,572,251,142,478,27,242,317,370,53,175,279,756,212,274,81,100,220,22,233,351,363,726,329,2,740,735,272,413,387,640,103,401,125,135,642,681,714,421,91,778,61,552,512,67,71,336,410,736,166,20,565,669,40,609,614,165,453,314,301,563,503,486,156,454,680,594,766,19,184,443,315,783,80,482,751,505,51,342,200,795,294,608,397,82,295,631,244,719,794,692,684,728,539,709,420,385,643,25,204,327,591,537,379,637,257,786,219,234,373,654,604,568,55,422,784,418,74,189,473,653,143,375,661,646,402,785,250,752,278,713,569,526,510,562,758,159,286,574,282,109,660,293,112,99,374,412,554,406,697,171,261,621,337,791,399,444,283,768,101,47,490,322,275,111,598,217,798,704,83,36,236,18,207,58,31,30,407,211,626,66,745,6,173,670,284,701,392,531,177,694,403,378,59,334,132,461,249,181,326,393,678,155,776,593,254,792,390,432,657,15,255,750,459,760,50,634,551,507,597,711,456,561,446,240,477,380,491,304,451,747,235,395,271,419,619,10,345,245,472,253,270,192,516,527,354,296,356,92,545,269,126,749,110,617,202,748,689,664,521,519,707,620,145,460,291,309,610,247,796,541,429,308,396,636,134,465,151,323,280,350,754,276,440,32,218,536,624,88,16,415,723,17,161,122,476,228,213,93,42,425,645,180,365,576,730,311,124,388,517,580,524,230,285,225,648,205,582,382,501,612,199,761,167,529,438,256,339,222,520,264,467,585,8,196,777,319,599,540,771,738,325,638,215,732,586,98,44,49,741,57,179,506,239,496,463,436,606,137,729,252,716,700,452,105,214,260,107,33,162,1,578,445,78,389,439,533,674,508,37,56,139,349,757,567,655,64,287,673,300,197,522,656,647,377,231,663,183,366,246,227,152,172,504,548,437,157,497,458,400};
        nums = new int[]{9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18};
        System.out.println(array.numOfWays(nums));
    }
    public int numOfWays(int[] nums) {
        int n= nums.length;
        if(n==1) return 1;
        cache = new int[n][n];
        //C(n,m)=C(n-1,m)+C(n-1,m-1)
        cache[1][0]=cache[1][1]=1;
        for (int i = 2; i < n; i++) {
            cache[i][0]=1;
            for (int j = 1; j <= i; j++) {
                cache[i][j]= (cache[i-1][j]+cache[i-1][j-1])%M;
            }
        }
        List<Integer> list = new ArrayList<>();
        for(int e:nums) list.add(e);
        long res = dfs(list);
        return (int)((res-1)%M);

    }
    static final int M=(int)1e9+7;

    long dfs(List<Integer> nums){
        int n=nums.size();
        List<Integer> left=new ArrayList<>(), right=new ArrayList<>();
        int root = nums.get(0);
        for(int i=1; i<n; i++){
            int cur=nums.get(i);
            if(cur<root){
                left.add(cur);
            }else{
                right.add(cur);
            }
        }
        // System.out.printf("--------tree: %d,%d, root=%d\n", left.size(), right.size(), root);
        long L=0, R=0;
        if(left.size()!=0) L = dfs(left);
        if(right.size()!=0) R = dfs(right);
        if(L==0 && R==0) return 1;
        if(L==0) return R;
        if(R==0) return L;
        long res = cache[left.size()+right.size()][left.size()];
        // System.out.printf("---left=%d,right=%d,dfsc=%d\n",left.size(), right.size(),res);
        res = ((L*R)%M)*res;
        // System.out.printf("--------tree:root=%d, res=%d, L=%d, R=%d,\n",  root, res,L,R);
        return res%M;
    }
    int[][] cache;

}
