package leetcode.problems.dynamicPrograming;

import utils.PrintUtils;
import utils.Utils;

import java.util.Arrays;

/**
 * @author shibing
 * @since 2019/5/1 15:04
 */
public class CherryPickup {
    public static void main(String[] args) {
        CherryPickup cherry=new CherryPickup();
        int[][] grid= {{0, 1, -1}, {1, 0, -1}, {1, 1,  1}};
//         grid= new int[][]{{0, -1, 1,0}, {-1, 0, -1, 0}, {1, 1,  0,0}, {1,1,0,0}};
//        grid= new int[][]{{0, 1, 1,0}, {1, 0, -1, -1}, {1, 1,  -1,1}, {1,1,-1,0}};
//        grid=new int[][]{{1}};
//        grid=new int[][]{{0,-1},{-1,1}};
//        grid=new int[][]{{0,1},{0,1}};
//        grid=new int[][]{{1,-1},{0,1}};
//        grid=new  int[][]{{1,-1,-1,-1,-1},{1,0,1,-1,-1},{0,-1,1,0,1},{1,0,1,1,0},{-1,-1,-1,1,1}};
//        grid=new int[][]{{1,1,1,1,0,0,0},{0,0,0,1,0,0,0},{0,0,0,1,0,0,1},{1,0,0,1,0,0,0},{0,0,0,1,0,0,0},{0,0,0,1,0,0,0},{0,0,0,1,1,1,1}};
//        grid=new int[][]{{1,-1,1,-1,1,1,1,1,1,-1},{-1,1,1,-1,-1,1,1,1,1,1},{1,1,1,-1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1},{-1,1,1,1,1,1,1,1,1,1},{1,-1,1,1,1,1,-1,1,1,1},{1,1,1,-1,1,1,-1,1,1,1},{1,-1,1,-1,-1,1,1,1,1,1},{1,1,-1,-1,1,1,1,-1,1,-1},{1,1,-1,1,1,1,1,1,1,1}};
//        grid=new int[][]{{1,1,1,1,1},{1,1,-1,1,1},{-1,-1,1,1,1},{1,1,1,1,1},{-1,1,1,1,1}};
//grid=new int[][]{{1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1},{1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,-1},{1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1},{-1,1,1,1,0,1,1,1,1,1,1,1,-1,1,1,-1,1,-1,1,1},{1,1,1,1,1,-1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1,-1},{1,1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1},{1,1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1},{1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1},{-1,1,1,1,1,1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,-1},{1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1},{-1,1,-1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,1,0,1,1,1},{-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,-1,-1},{1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1},{0,1,1,-1,1,1,1,1,-1,1,-1,1,1,1,-1,-1,-1,1,1,1},{1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1},{1,1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1},{1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,1,-1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,-1,0,1},{-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1}};
//grid=new int[][] {{1,-1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1},{1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,1},{1,-1,-1,-1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1},{1,1,-1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,1,1,1},{1,-1,-1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1},{1,1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,1,-1,1,1},{-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1,1,1,1,-1,1,-1},{1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,-1},{1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1},{-1,-1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,0,1,1,1},{-1,1,1,1,-1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1},{1,1,-1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,1,1,1,1,1},{1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1},{1,1,1,1,1,-1,1,1,1,1,1,1,-1,1,-1,-1,1,1,1,1},{1,1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1},{1,1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1}};
//grid=new int[][]{{0,0,0,-1,0,0,0,0,1,0,0,0,1,0,1,1,-1,0,1,0,1,0,1,-1,0,-1,0,-1,0,-1,1,0,-1,1,1,1,1,0,-1,1,1,1,1,1,1,0,1,1,0,1},{1,0,0,1,1,1,0,1,-1,0,1,1,0,1,1,1,0,0,1,1,1,0,-1,0,1,0,1,0,1,1,0,1,1,-1,0,1,1,1,1,0,-1,0,1,0,0,0,0,0,1,0},{0,0,1,0,1,1,0,0,0,-1,0,0,0,0,1,0,1,1,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,0,0,-1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1},{1,0,1,1,0,1,1,0,-1,1,-1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,-1,0},{0,0,0,1,-1,1,0,-1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,0,0,1,0,1,1},{0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,-1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,0,0,1,0},{-1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,-1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1},{0,1,1,0,1,0,1,0,0,-1,0,1,1,1,0,0,0,1,1,-1,1,-1,-1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,-1,0,1,0,0,1,1,1,0,-1},{1,0,1,-1,1,-1,1,0,0,0,0,1,0,0,0,-1,0,0,0,1,0,1,0,1,1,-1,1,0,1,1,1,1,1,1,-1,0,0,0,0,1,0,1,1,1,-1,1,1,1,-1,1},{1,1,1,0,-1,0,-1,1,1,0,0,1,1,1,1,1,-1,1,0,1,1,-1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,-1,1,1,1,0,0,0,1,-1},{1,1,1,-1,1,-1,1,0,0,-1,0,1,-1,0,-1,0,1,1,0,-1,1,0,-1,0,-1,0,1,1,-1,1,1,1,0,0,0,-1,0,1,1,1,0,1,1,1,1,1,1,0,1,1},{1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,-1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,1},{1,1,1,1,1,-1,0,1,1,1,1,0,1,-1,1,0,0,1,1,1,0,0,0,1,1,-1,1,1,-1,1,0,1,-1,1,0,1,1,0,0,0,1,0,-1,1,0,1,1,0,1,1},{1,1,1,1,-1,0,1,0,1,1,0,0,1,0,1,0,0,-1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,-1,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0},{1,1,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,-1,0,0,1,0,1,-1,-1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1},{0,0,1,1,1,1,0,0,0,1,1,-1,1,1,-1,-1,0,1,-1,0,0,1,0,1,0,1,0,1,1,0,0,0,-1,0,1,0,1,0,1,0,0,1,-1,1,0,1,1,0,0,0},{0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,-1,-1,1,1,1,0,0,1,1},{1,0,-1,0,1,1,1,0,0,1,0,0,0,1,1,0,-1,1,0,-1,0,0,-1,-1,0,0,0,1,-1,1,0,-1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,-1},{-1,-1,1,-1,0,1,1,1,0,-1,1,-1,0,0,0,0,0,-1,0,1,1,-1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,-1,-1,1,1,1,0,0,0,0,1,0,1,0,1},{0,-1,1,1,1,-1,-1,0,-1,-1,1,0,0,0,0,-1,-1,1,0,0,0,1,-1,0,1,0,-1,0,-1,1,1,1,1,-1,0,0,1,0,1,0,-1,0,0,1,0,0,0,0,-1,0},{1,1,0,1,0,1,0,-1,1,0,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,-1,1,0,1,1,0,-1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0},{0,1,0,-1,0,0,0,1,1,-1,1,0,0,0,1,-1,0,0,1,1,1,1,1,1,1,-1,0,-1,0,1,-1,1,0,0,-1,1,1,1,1,0,-1,1,1,0,0,0,0,1,1,0},{0,1,-1,1,1,1,1,-1,0,0,1,1,0,1,0,0,-1,1,0,0,1,1,0,0,1,0,0,-1,1,0,1,0,1,0,0,1,1,0,-1,0,1,0,1,0,1,0,0,1,1,0},{0,0,0,1,0,0,-1,1,0,-1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,-1,1,0,0,0,1,0,1,1,1},{1,1,1,-1,0,1,1,1,1,0,0,0,0,1,0,1,0,-1,0,0,0,0,1,0,0,1,1,0,-1,-1,1,0,1,1,0,1,0,1,-1,-1,1,0,0,0,0,1,1,-1,0,0},{0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,-1,0,0,1,1,0,0,-1,-1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0},{1,-1,-1,1,-1,1,0,0,0,1,-1,1,1,1,1,0,1,0,1,0,0,1,1,1,0,0,0,0,0,-1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0},{1,1,1,0,0,0,0,-1,0,1,1,0,1,-1,1,0,0,1,0,0,-1,1,-1,1,0,1,0,1,0,1,-1,1,0,1,1,0,-1,0,1,0,0,0,1,0,0,1,0,0,1,1},{0,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,-1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,0,-1,1,0,1,0,1,1,1,0},{0,1,1,0,1,0,0,0,1,1,-1,1,0,1,0,0,1,0,-1,0,1,1,0,0,-1,0,1,-1,1,1,0,0,1,-1,0,0,0,1,-1,0,1,1,1,0,1,0,1,0,1,-1},{0,1,-1,1,0,1,1,0,0,0,0,1,0,1,0,-1,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0,-1,1,0,-1,0,0,1,0,1,1,0,0,0,1,1,0},{1,0,0,0,0,1,0,0,0,1,1,-1,1,0,1,0,1,1,1,0,1,1,0,1,1,-1,1,1,1,0,-1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0},{1,1,1,1,0,-1,0,0,0,-1,1,0,1,0,1,0,0,0,1,1,1,1,0,-1,1,1,0,1,0,0,1,-1,-1,1,0,1,-1,0,-1,1,0,0,-1,0,0,1,1,0,1,1},{0,1,1,0,0,1,1,1,1,-1,1,0,0,0,0,0,-1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,-1,0,0,0,0,1,0,1,1,0,1,-1},{0,1,-1,0,1,-1,1,0,0,1,1,1,-1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,-1,0,1,0,0,-1,0,0,0,0,1,1,1,0,-1,-1,1},{1,0,1,-1,1,1,0,0,0,1,1,0,1,0,0,1,0,-1,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,-1,0,1,-1,1,0},{0,0,0,0,-1,1,1,1,0,0,0,1,0,0,1,-1,1,-1,1,1,-1,0,1,0,-1,-1,0,0,1,1,1,0,-1,0,0,-1,-1,1,0,0,1,0,1,1,0,1,1,-1,-1,1},{1,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,1,-1,0,0,1,0,1,-1,-1,-1,1,1,1,1,0,-1,0,-1,0,1,1,0,0,0,0,0,1,1,0,1,0,0},{1,1,0,-1,-1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,-1,0,1,1,1,0,0,1,0,0,1,0,-1,1,1,0,0,1,0,-1,1,0,0,1,0,0,1,-1,0,0,0},{1,0,1,1,-1,0,1,1,0,-1,1,1,-1,-1,1,-1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,-1,0,0,1,-1,0,1,0,0,1,0,1,1,0,1,-1},{0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,-1,0,1,-1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,-1,1,1,1,1,1},{0,0,0,1,1,1,0,1,-1,1,0,0,1,0,1,0,1,0,1,0,-1,0,0,0,0,-1,0,0,0,0,1,1,0,1,1,1,-1,1,1,0,-1,0,0,1,1,1,-1,0,0,0},{1,0,0,1,1,0,1,0,0,1,1,-1,1,0,0,1,1,0,-1,1,0,0,1,1,1,1,1,1,0,0,0,-1,1,1,0,0,1,0,0,0,1,0,1,0,1,1,-1,1,1,1},{1,1,-1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1},{1,0,1,0,1,1,0,-1,0,1,1,1,1,1,1,-1,1,1,-1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,0,-1,1,0,1,0},{0,1,0,1,1,1,0,0,0,-1,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,-1,1,1,1,0,-1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,-1},{0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,-1,0,1,1,1,1,0,0,0,0,1,0,-1,-1,1,-1,0,0,0,-1,0,-1,0,1,0,1,0,1,0,1,1,1,-1,0},{0,0,1,1,1,0,1,-1,1,0,0,1,1,0,1,0,0,1,1,-1,1,1,1,0,0,-1,0,1,0,0,1,0,0,1,0,1,0,1,0,-1,1,1,1,1,1,0,0,-1,1,1},{0,1,-1,0,0,1,1,1,-1,1,-1,1,0,0,1,1,1,1,0,1,0,0,-1,0,0,0,1,1,0,1,0,1,1,0,-1,1,1,1,0,1,-1,1,-1,0,0,1,0,-1,0,1},{0,1,1,0,1,1,1,0,0,0,0,0,0,0,-1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,-1,1,0,0,0,1,0,0,0,0,1,1,-1,-1,0,-1,1,1}};
         PrintUtils.print2DIntArray(grid, 2);
        System.out.println("*****************");
//        System.out.println(cherry.cherryPickup(grid));
//        System.out.println(cherry.cherryPickup1(grid));
        System.out.println(cherry.cherryPickup2(grid));
        System.out.println(cherry.cherryPickup3(grid));

    }

    //  i+c=t   =>   t-n<=i<=t  and  0<=i<n  =>   max(t-n,0) <= i<min(t+1, n)
    // j is same as i
    public int cherryPickup3(int[][] grid) {
        int m=grid.length;
        if(m==1) return grid[0][0];
        int[][] dp=new int[m+1][m+1];
        for(int[] row:dp) Arrays.fill(row,-1);
//        dp[0][0]=grid[0][0];
        dp[1][1]=grid[0][0];
//        PrintUtils.print2DIntArray(dp);
        for (int t = 1; t <= 2*m-2; t++) {
            boolean end=true;
            for (int i = Math.min(m-1,t); i >= Math.max(t-m+1, 0); i--) {
                for (int j = Math.min(m-1,t); j >=i;  j--) {
                    int c1=t-i, c2=t-j;
                    if(grid[i][c1]==-1 || grid[j][c2]==-1){
                        dp[i+1][j+1]=-1;
                        continue;
                    }
                    dp[i+1][j+1]= Utils.max(dp[i][j] , dp[i+1][j], dp[i][j+1], dp[i+1][j+1]);
                    if(dp[i+1][j+1]!=-1){
                        dp[i+1][j+1] += (i==j ? grid[i][c1] : grid[i][c1]+grid[j][c2]);
                        end=false;
                    }
                }
            }
//            System.out.println("-----------------------t="+t);
//            PrintUtils.print2DIntArray(dp);
            if(end) return 0;
        }
        return dp[m][m];
    }

    //dp(k,i,j) is the most number of cherries obtained by two people starting at (0,0) towards (i, k-i), (j,k-j)
    public int cherryPickup2(int[][] grid) {
        int m=grid.length, n=grid[0].length;
        if(m==1&&n==1) return grid[0][0];
        int[][][] dp=new int[m+n][m][m];
        for (int t = 1; t <= m+n-2; t++) {
            boolean end=true;
            for (int i = m-1; i >= 0; i--) {
                for (int j = m-1; j >= 0; j--) {
                    int c1=t-i, c2=t-j;
                    if(c1<0 || c1>=n || c2<0 || c2>=n || grid[i][c1]==-1 || grid[j][c2]==-1){
                        dp[t][i][j]=-1;
                        continue;
                    }

                    dp[t][i][j]=dp[t-1][i][j];
                    if(i>0) dp[t][i][j]= Math.max(dp[t-1][i-1][j], dp[t][i][j]);
                    if(j>0)  dp[t][i][j] =Math.max(dp[t - 1][i][j - 1], dp[t][i][j]);
                    if(i>0 && j>0) dp[t][i][j]= Math.max(dp[t-1][i-1][j-1], dp[t][i][j]);

                    if(dp[t][i][j]!=-1) {
                        dp[t][i][j] += (i == j ? grid[i][c1] : grid[i][c1] + grid[j][c2]);
                        end = false;
                    }
                }
            }
//            System.out.println("-----------------------t="+t);
//            PrintUtils.print2DIntArray(dp[t]);
            if(end) return 0;
        }
        int res=dp[m+n-2][m-1][m-1];
        return res==-1?0:res+grid[0][0];
    }


    // same as algo1 Wrong Answer
    public int cherryPickup(int[][] grid) {
        int m=grid.length, n=grid[0].length;
        if(m==1&&n==1) return grid[0][0];
        return recursive(grid, new int[]{m-1,n-1}, 0);
    }
    public int recursive(int[][] grid, int[] cur, int v){
        if(cur[0]<0 || cur[1]<0 || grid[cur[0]][cur[1]]<0) return 0;
        int m=grid.length, n=grid[0].length;
        if(cur[0]==0 && cur[1]==0){
            int[][] dp=new int[m+1][n+1];
            for (int i = 0; i < m; i++) {
                for (int j = 0; j <n ; j++) {
                    if(grid[i][j]!=-1)
                        dp[i+1][j+1]=grid[i][j]+Math.max(dp[i+1][j], dp[i][j+1]);
                }
            }
            return dp[m][n]+v;
        }
        int curv=grid[cur[0]][cur[1]];
        grid[cur[0]][cur[1]]=0;
        int L=recursive(grid, new int[]{cur[0]-1, cur[1]}, curv+v);
        int U=recursive(grid, new int[]{cur[0], cur[1]-1}, curv+v);
        grid[cur[0]][cur[1]]=curv;
        return Math.max(L,U);
    }

    //TLE dp+backtrace O(N^4)  Wrong Answer
    public int cherryPickup1(int[][] grid) {
        int m=grid.length, n=grid[0].length;
        if(m==1&&n==1) return grid[0][0];
        int res=recursive(grid, new int[]{m-1,n-1});
        return res==-1?0:res;
    }
    public int recursive(int[][] grid, int[] cur){
        if(cur[0]<0 || cur[1]<0 || grid[cur[0]][cur[1]]<0) return -1;
        int m=grid.length, n=grid[0].length;
        if(cur[0]==0 && cur[1]==0){
            int[][] dp=new int[m+1][n+1];
            for (int i = 0; i < m; i++) {
                for (int j = 0; j <n ; j++) {
                    if(grid[i][j]!=-1)
                        dp[i+1][j+1]=grid[i][j]+Math.max(dp[i+1][j], dp[i][j+1]);
                }
            }
            return dp[m][n];
        }
        int v=grid[cur[0]][cur[1]];
        grid[cur[0]][cur[1]]=0;
        int L=recursive(grid, new int[]{cur[0]-1, cur[1]});
        int U=recursive(grid, new int[]{cur[0], cur[1]-1});
        grid[cur[0]][cur[1]]=v;
        return L==-1&&U==-1?-1:(Math.max(L,U)+v);
    }
}
